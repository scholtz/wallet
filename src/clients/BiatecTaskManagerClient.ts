/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
  SendTransactionParams,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
  modelsv2,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "createApplication()void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "updateApplication(string)void": {
      call_config: {
        update_application: "CALL",
      },
    },
    "bootstrap(pay,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "registerTask(pay,(uint64,uint64,uint64))void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "unregisterTask(uint64,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "executeTask(appl)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "fundTask(uint64,txn)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "changeTaskFee(uint64,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "unfundTask(uint64,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "payment(address,uint64,address,string)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "assetTransfer(address,uint64,uint64,address,string)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void":
      {
        call_config: {
          no_op: "CALL",
        },
      },
    "sendOfflineKeyRegistration()void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  bare_call_config: {
    no_op: "NEVER",
    opt_in: "NEVER",
    close_out: "NEVER",
    update_application: "NEVER",
    delete_application: "NEVER",
  },
  schema: {
    local: {
      declared: {},
      reserved: {},
    },
    global: {
      declared: {
        feeAssetId: {
          type: "uint64",
          key: "fa",
        },
        depositedFunds: {
          type: "uint64",
          key: "d",
        },
        version: {
          type: "bytes",
          key: "scver",
        },
      },
      reserved: {},
    },
  },
  state: {
    global: {
      num_byte_slices: 1,
      num_uints: 2,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  contract: {
    name: "BiatecTaskManager",
    desc: "",
    methods: [
      {
        name: "createApplication",
        desc: "Initial setup",
        args: [],
        returns: {
          type: "void",
        },
      },
      {
        name: "updateApplication",
        desc: "Creator can update application",
        args: [
          {
            name: "version",
            type: "string",
            desc: "App version",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "bootstrap",
        desc: "Bootstrap the contract to optin to the fee asset and setup basic variables",
        args: [
          {
            name: "txBaseDeposit",
            type: "pay",
            desc: "Deposit MBR",
          },
          {
            name: "feeAssetId",
            type: "uint64",
            desc: "Fee asset id",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "registerTask",
        desc: "Register a task to be executedOnly app it self can call register task",
        args: [
          {
            name: "registrationFeeDeposit",
            type: "pay",
            desc: "The axfer or pay that deposits the initial funds",
          },
          {
            name: "task",
            type: "(uint64,uint64,uint64)",
            desc: "The task object",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "unregisterTask",
        desc: "Unregister a task when task is deleted",
        args: [
          {
            name: "app",
            type: "uint64",
            desc: "App to unregister",
          },
          {
            name: "indexToDelete",
            type: "uint64",
            desc: "App index to delete from user's apps",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "executeTask",
        desc: "Execute a task and get the reward",
        args: [
          {
            name: "taskAppCall",
            type: "appl",
            desc: "The call to the task app",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "fundTask",
        desc: "Deposit funds for a task",
        args: [
          {
            name: "taskAppId",
            type: "uint64",
            desc: "The ID of the task to fund",
          },
          {
            name: "deposit",
            type: "txn",
            desc: "The pay or axfer to fund the task",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "changeTaskFee",
        desc: "Creator of the task is allowed to change the fee",
        args: [
          {
            name: "taskAppId",
            type: "uint64",
            desc: "The ID of the task to fund",
          },
          {
            name: "fee",
            type: "uint64",
            desc: "Fee in base units of the fee token",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "unfundTask",
        desc: "Remove funds for a taskCreator of the underlying task can remove the funds from the pool",
        args: [
          {
            name: "taskAppId",
            type: "uint64",
            desc: "The ID of the task to fund",
          },
          {
            name: "amount",
            type: "uint64",
            desc: "The amount to withdraw from the pool",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "payment",
        desc: "Creator can send pay/axfer transaction out of the smart contract",
        args: [
          {
            name: "sender",
            type: "address",
            desc: "Sender. This app id or any rekeyed account to the address of this sc",
          },
          {
            name: "amount",
            type: "uint64",
            desc: "Amount",
          },
          {
            name: "receiver",
            type: "address",
            desc: "Receiver",
          },
          {
            name: "note",
            type: "string",
            desc: "Note",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "assetTransfer",
        desc: "Creator can send pay/axfer transaction out of the smart contract",
        args: [
          {
            name: "sender",
            type: "address",
            desc: "Sender. This app id or any rekeyed account to the address of this sc",
          },
          {
            name: "xferAsset",
            type: "uint64",
          },
          {
            name: "assetAmount",
            type: "uint64",
          },
          {
            name: "assetReceiver",
            type: "address",
          },
          {
            name: "note",
            type: "string",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "sendOnlineKeyRegistration",
        desc: "Creator can perfom key registration for this LP pool",
        args: [
          {
            name: "votePk",
            type: "byte[]",
          },
          {
            name: "selectionPk",
            type: "byte[]",
          },
          {
            name: "stateProofPk",
            type: "byte[]",
          },
          {
            name: "voteFirst",
            type: "uint64",
          },
          {
            name: "voteLast",
            type: "uint64",
          },
          {
            name: "voteKeyDilution",
            type: "uint64",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "sendOfflineKeyRegistration",
        desc: "Creator can perfom key unregistration for this LP pool",
        args: [],
        returns: {
          type: "void",
        },
      },
    ],
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

export type AppCreateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult> &
  AppReference;
export type AppUpdateCallTransactionResult = AppCallTransactionResult &
  Partial<AppCompilationResult>;

export type AppClientComposeCallCoreParams = Omit<
  AppClientCallCoreParams,
  "sendParams"
> & {
  sendParams?: Omit<
    SendTransactionParams,
    | "skipSending"
    | "atc"
    | "skipWaiting"
    | "maxRoundsToWaitForConfirmation"
    | "populateAppCallResources"
  >;
};
export type AppClientComposeExecuteParams = Pick<
  SendTransactionParams,
  "skipWaiting" | "maxRoundsToWaitForConfirmation" | "suppressLog"
>;

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>;
};

/**
 * Defines the types of available calls and state of the BiatecTaskManager smart contract.
 */
export type BiatecTaskManager = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication()void" | "createApplication",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "updateApplication(string)void" | "updateApplication",
      {
        argsObj: {
          /**
           * App version
           */
          version: string;
        };
        argsTuple: [version: string];
        returns: void;
      }
    > &
    Record<
      "bootstrap(pay,uint64)void" | "bootstrap",
      {
        argsObj: {
          /**
           * Deposit MBR
           */
          txBaseDeposit:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          /**
           * Fee asset id
           */
          feeAssetId: bigint | number;
        };
        argsTuple: [
          txBaseDeposit:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          feeAssetId: bigint | number
        ];
        returns: void;
      }
    > &
    Record<
      "registerTask(pay,(uint64,uint64,uint64))void" | "registerTask",
      {
        argsObj: {
          /**
           * The axfer or pay that deposits the initial funds
           */
          registrationFeeDeposit:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
          /**
           * The task object
           */
          task: [bigint | number, bigint | number, bigint | number];
        };
        argsTuple: [
          registrationFeeDeposit:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
          task: [bigint | number, bigint | number, bigint | number]
        ];
        returns: void;
      }
    > &
    Record<
      "unregisterTask(uint64,uint64)void" | "unregisterTask",
      {
        argsObj: {
          /**
           * App to unregister
           */
          app: bigint | number;
          /**
           * App index to delete from user's apps
           */
          indexToDelete: bigint | number;
        };
        argsTuple: [app: bigint | number, indexToDelete: bigint | number];
        returns: void;
      }
    > &
    Record<
      "executeTask(appl)void" | "executeTask",
      {
        argsObj: {
          /**
           * The call to the task app
           */
          taskAppCall:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          taskAppCall:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        returns: void;
      }
    > &
    Record<
      "fundTask(uint64,txn)void" | "fundTask",
      {
        argsObj: {
          /**
           * The ID of the task to fund
           */
          taskAppId: bigint | number;
          /**
           * The pay or axfer to fund the task
           */
          deposit:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          taskAppId: bigint | number,
          deposit:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>
        ];
        returns: void;
      }
    > &
    Record<
      "changeTaskFee(uint64,uint64)void" | "changeTaskFee",
      {
        argsObj: {
          /**
           * The ID of the task to fund
           */
          taskAppId: bigint | number;
          /**
           * Fee in base units of the fee token
           */
          fee: bigint | number;
        };
        argsTuple: [taskAppId: bigint | number, fee: bigint | number];
        returns: void;
      }
    > &
    Record<
      "unfundTask(uint64,uint64)void" | "unfundTask",
      {
        argsObj: {
          /**
           * The ID of the task to fund
           */
          taskAppId: bigint | number;
          /**
           * The amount to withdraw from the pool
           */
          amount: bigint | number;
        };
        argsTuple: [taskAppId: bigint | number, amount: bigint | number];
        returns: void;
      }
    > &
    Record<
      "payment(address,uint64,address,string)void" | "payment",
      {
        argsObj: {
          /**
           * Sender. This app id or any rekeyed account to the address of this sc
           */
          sender: string;
          /**
           * Amount
           */
          amount: bigint | number;
          /**
           * Receiver
           */
          receiver: string;
          /**
           * Note
           */
          note: string;
        };
        argsTuple: [
          sender: string,
          amount: bigint | number,
          receiver: string,
          note: string
        ];
        returns: void;
      }
    > &
    Record<
      | "assetTransfer(address,uint64,uint64,address,string)void"
      | "assetTransfer",
      {
        argsObj: {
          /**
           * Sender. This app id or any rekeyed account to the address of this sc
           */
          sender: string;
          xferAsset: bigint | number;
          assetAmount: bigint | number;
          assetReceiver: string;
          note: string;
        };
        argsTuple: [
          sender: string,
          xferAsset: bigint | number,
          assetAmount: bigint | number,
          assetReceiver: string,
          note: string
        ];
        returns: void;
      }
    > &
    Record<
      | "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void"
      | "sendOnlineKeyRegistration",
      {
        argsObj: {
          votePk: Uint8Array;
          selectionPk: Uint8Array;
          stateProofPk: Uint8Array;
          voteFirst: bigint | number;
          voteLast: bigint | number;
          voteKeyDilution: bigint | number;
        };
        argsTuple: [
          votePk: Uint8Array,
          selectionPk: Uint8Array,
          stateProofPk: Uint8Array,
          voteFirst: bigint | number,
          voteLast: bigint | number,
          voteKeyDilution: bigint | number
        ];
        returns: void;
      }
    > &
    Record<
      "sendOfflineKeyRegistration()void" | "sendOfflineKeyRegistration",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      fa?: IntegerState;
      d?: IntegerState;
      scver?: BinaryState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type BiatecTaskManagerSig = keyof BiatecTaskManager["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<
  TSignature extends BiatecTaskManagerSig | undefined
> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the BiatecTaskManager smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BiatecTaskManagerSig> =
  BiatecTaskManager["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the BiatecTaskManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecTaskManagerSig> =
  BiatecTaskManager["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type BiatecTaskManagerCreateCalls =
  (typeof BiatecTaskManagerCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type BiatecTaskManagerCreateCallParams =
  | TypedCallParams<"createApplication()void"> & OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type BiatecTaskManagerUpdateCalls =
  (typeof BiatecTaskManagerCallFactory)["update"];
/**
 * Defines supported update methods for this smart contract
 */
export type BiatecTaskManagerUpdateCallParams =
  TypedCallParams<"updateApplication(string)void">;
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecTaskManagerDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: BiatecTaskManagerCreateCalls
  ) => BiatecTaskManagerCreateCallParams;
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (
    callFactory: BiatecTaskManagerUpdateCalls
  ) => BiatecTaskManagerUpdateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BiatecTaskManagerCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BiatecTaskManager smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method: "createApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the BiatecTaskManager smart contract using the updateApplication(string)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(
        args: MethodArgs<"updateApplication(string)void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams = {}
      ) {
        return {
          method: "updateApplication(string)void" as const,
          methodArgs: Array.isArray(args) ? args : [args.version],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the bootstrap(pay,uint64)void ABI method
   *
   * Bootstrap the contract to optin to the fee asset and setup basic variables
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(
    args: MethodArgs<"bootstrap(pay,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "bootstrap(pay,uint64)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.txBaseDeposit, args.feeAssetId],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the registerTask(pay,(uint64,uint64,uint64))void ABI method
   *
   * Register a task to be executedOnly app it self can call register task
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerTask(
    args: MethodArgs<"registerTask(pay,(uint64,uint64,uint64))void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "registerTask(pay,(uint64,uint64,uint64))void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.registrationFeeDeposit, args.task],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the unregisterTask(uint64,uint64)void ABI method
   *
   * Unregister a task when task is deleted
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unregisterTask(
    args: MethodArgs<"unregisterTask(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "unregisterTask(uint64,uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.app, args.indexToDelete],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the executeTask(appl)void ABI method
   *
   * Execute a task and get the reward
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static executeTask(
    args: MethodArgs<"executeTask(appl)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "executeTask(appl)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.taskAppCall],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the fundTask(uint64,txn)void ABI method
   *
   * Deposit funds for a task
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundTask(
    args: MethodArgs<"fundTask(uint64,txn)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "fundTask(uint64,txn)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.taskAppId, args.deposit],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the changeTaskFee(uint64,uint64)void ABI method
   *
   * Creator of the task is allowed to change the fee
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeTaskFee(
    args: MethodArgs<"changeTaskFee(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "changeTaskFee(uint64,uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.taskAppId, args.fee],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the unfundTask(uint64,uint64)void ABI method
   *
   * Remove funds for a taskCreator of the underlying task can remove the funds from the pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unfundTask(
    args: MethodArgs<"unfundTask(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "unfundTask(uint64,uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.taskAppId, args.amount],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the payment(address,uint64,address,string)void ABI method
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payment(
    args: MethodArgs<"payment(address,uint64,address,string)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "payment(address,uint64,address,string)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.sender, args.amount, args.receiver, args.note],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the assetTransfer(address,uint64,uint64,address,string)void ABI method
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetTransfer(
    args: MethodArgs<"assetTransfer(address,uint64,uint64,address,string)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "assetTransfer(address,uint64,uint64,address,string)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.sender,
            args.xferAsset,
            args.assetAmount,
            args.assetReceiver,
            args.note,
          ],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOnlineKeyRegistration(
    args: MethodArgs<"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [
            args.votePk,
            args.selectionPk,
            args.stateProofPk,
            args.voteFirst,
            args.voteLast,
            args.voteKeyDilution,
          ],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the sendOfflineKeyRegistration()void ABI method
   *
   * Creator can perfom key unregistration for this LP pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOfflineKeyRegistration(
    args: MethodArgs<"sendOfflineKeyRegistration()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "sendOfflineKeyRegistration()void" as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    };
  }
}

/**
 * A client to make calls to the BiatecTaskManager smart contract
 */
export class BiatecTaskManagerClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `BiatecTaskManagerClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<
    TReturn,
    TResult extends AppCallTransactionResult = AppCallTransactionResult
  >(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return {
      ...result,
      return: returnValue,
    } as AppCallTransactionResultOfType<TReturn> & TResult;
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BiatecTaskManager["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the BiatecTaskManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: BiatecTaskManagerDeployArgs &
      AppClientDeployCoreParams &
      IncludeSchema = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(BiatecTaskManagerCallFactory.create);
    const updateArgs = params.updateCall?.(BiatecTaskManagerCallFactory.update);
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the BiatecTaskManager smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          IncludeSchema &
          OnCompleteNoOp = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"createApplication()void">,
          AppCreateCallTransactionResult
        >(
          await $this.appClient.create(
            BiatecTaskManagerCallFactory.create.createApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this;
    return {
      /**
       * Updates an existing instance of the BiatecTaskManager smart contract using the updateApplication(string)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(
        args: MethodArgs<"updateApplication(string)void">,
        params: AppClientCallCoreParams & AppClientCompilationParams = {}
      ) {
        return $this.mapReturnValue<
          MethodReturn<"updateApplication(string)void">,
          AppUpdateCallTransactionResult
        >(
          await $this.appClient.update(
            BiatecTaskManagerCallFactory.update.updateApplication(args, params)
          )
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecTaskManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the bootstrap(pay,uint64)void ABI method.
   *
   * Bootstrap the contract to optin to the fee asset and setup basic variables
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(
    args: MethodArgs<"bootstrap(pay,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.bootstrap(args, params));
  }

  /**
   * Calls the registerTask(pay,(uint64,uint64,uint64))void ABI method.
   *
   * Register a task to be executedOnly app it self can call register task
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerTask(
    args: MethodArgs<"registerTask(pay,(uint64,uint64,uint64))void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.registerTask(args, params));
  }

  /**
   * Calls the unregisterTask(uint64,uint64)void ABI method.
   *
   * Unregister a task when task is deleted
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unregisterTask(
    args: MethodArgs<"unregisterTask(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.unregisterTask(args, params));
  }

  /**
   * Calls the executeTask(appl)void ABI method.
   *
   * Execute a task and get the reward
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public executeTask(
    args: MethodArgs<"executeTask(appl)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.executeTask(args, params));
  }

  /**
   * Calls the fundTask(uint64,txn)void ABI method.
   *
   * Deposit funds for a task
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundTask(
    args: MethodArgs<"fundTask(uint64,txn)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.fundTask(args, params));
  }

  /**
   * Calls the changeTaskFee(uint64,uint64)void ABI method.
   *
   * Creator of the task is allowed to change the fee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeTaskFee(
    args: MethodArgs<"changeTaskFee(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.changeTaskFee(args, params));
  }

  /**
   * Calls the unfundTask(uint64,uint64)void ABI method.
   *
   * Remove funds for a taskCreator of the underlying task can remove the funds from the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unfundTask(
    args: MethodArgs<"unfundTask(uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.unfundTask(args, params));
  }

  /**
   * Calls the payment(address,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payment(
    args: MethodArgs<"payment(address,uint64,address,string)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.payment(args, params));
  }

  /**
   * Calls the assetTransfer(address,uint64,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetTransfer(
    args: MethodArgs<"assetTransfer(address,uint64,uint64,address,string)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(BiatecTaskManagerCallFactory.assetTransfer(args, params));
  }

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOnlineKeyRegistration(
    args: MethodArgs<"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      BiatecTaskManagerCallFactory.sendOnlineKeyRegistration(args, params)
    );
  }

  /**
   * Calls the sendOfflineKeyRegistration()void ABI method.
   *
   * Creator can perfom key unregistration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOfflineKeyRegistration(
    args: MethodArgs<"sendOfflineKeyRegistration()void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(
      BiatecTaskManagerCallFactory.sendOfflineKeyRegistration(args, params)
    );
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BiatecTaskManager["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get fa() {
        return BiatecTaskManagerClient.getIntegerState(state, "fa");
      },
      get d() {
        return BiatecTaskManagerClient.getIntegerState(state, "d");
      },
      get scver() {
        return BiatecTaskManagerClient.getBinaryState(state, "scver");
      },
    };
  }

  public compose(): BiatecTaskManagerComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      bootstrap(
        args: MethodArgs<"bootstrap(pay,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.bootstrap(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      registerTask(
        args: MethodArgs<"registerTask(pay,(uint64,uint64,uint64))void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.registerTask(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      unregisterTask(
        args: MethodArgs<"unregisterTask(uint64,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.unregisterTask(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      executeTask(
        args: MethodArgs<"executeTask(appl)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.executeTask(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      fundTask(
        args: MethodArgs<"fundTask(uint64,txn)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.fundTask(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      changeTaskFee(
        args: MethodArgs<"changeTaskFee(uint64,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.changeTaskFee(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      unfundTask(
        args: MethodArgs<"unfundTask(uint64,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.unfundTask(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      payment(
        args: MethodArgs<"payment(address,uint64,address,string)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.payment(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      assetTransfer(
        args: MethodArgs<"assetTransfer(address,uint64,uint64,address,string)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.assetTransfer(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      sendOnlineKeyRegistration(
        args: MethodArgs<"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.sendOnlineKeyRegistration(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      sendOfflineKeyRegistration(
        args: MethodArgs<"sendOfflineKeyRegistration()void">,
        params?: AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.sendOfflineKeyRegistration(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      get update() {
        const $this = this;
        return {
          updateApplication(
            args: MethodArgs<"updateApplication(string)void">,
            params?: AppClientComposeCallCoreParams & AppClientCompilationParams
          ) {
            promiseChain = promiseChain.then(() =>
              client.update.updateApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender
            )
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await atc.simulate(
          client.algod,
          new modelsv2.SimulateRequest({ txnGroups: [], ...options })
        );
        return {
          ...result,
          returns: result.methodResults?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue
          ),
        };
      },
    } as unknown as BiatecTaskManagerComposer;
  }
}
export type BiatecTaskManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(pay,uint64)void ABI method.
   *
   * Bootstrap the contract to optin to the fee asset and setup basic variables
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    args: MethodArgs<"bootstrap(pay,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"bootstrap(pay,uint64)void">]
  >;

  /**
   * Calls the registerTask(pay,(uint64,uint64,uint64))void ABI method.
   *
   * Register a task to be executedOnly app it self can call register task
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerTask(
    args: MethodArgs<"registerTask(pay,(uint64,uint64,uint64))void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"registerTask(pay,(uint64,uint64,uint64))void">]
  >;

  /**
   * Calls the unregisterTask(uint64,uint64)void ABI method.
   *
   * Unregister a task when task is deleted
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unregisterTask(
    args: MethodArgs<"unregisterTask(uint64,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"unregisterTask(uint64,uint64)void">]
  >;

  /**
   * Calls the executeTask(appl)void ABI method.
   *
   * Execute a task and get the reward
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeTask(
    args: MethodArgs<"executeTask(appl)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"executeTask(appl)void">]
  >;

  /**
   * Calls the fundTask(uint64,txn)void ABI method.
   *
   * Deposit funds for a task
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundTask(
    args: MethodArgs<"fundTask(uint64,txn)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"fundTask(uint64,txn)void">]
  >;

  /**
   * Calls the changeTaskFee(uint64,uint64)void ABI method.
   *
   * Creator of the task is allowed to change the fee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeTaskFee(
    args: MethodArgs<"changeTaskFee(uint64,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"changeTaskFee(uint64,uint64)void">]
  >;

  /**
   * Calls the unfundTask(uint64,uint64)void ABI method.
   *
   * Remove funds for a taskCreator of the underlying task can remove the funds from the pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unfundTask(
    args: MethodArgs<"unfundTask(uint64,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"unfundTask(uint64,uint64)void">]
  >;

  /**
   * Calls the payment(address,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payment(
    args: MethodArgs<"payment(address,uint64,address,string)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"payment(address,uint64,address,string)void">]
  >;

  /**
   * Calls the assetTransfer(address,uint64,uint64,address,string)void ABI method.
   *
   * Creator can send pay/axfer transaction out of the smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetTransfer(
    args: MethodArgs<"assetTransfer(address,uint64,uint64,address,string)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [
      ...TReturns,
      MethodReturn<"assetTransfer(address,uint64,uint64,address,string)void">
    ]
  >;

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * Creator can perfom key registration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(
    args: MethodArgs<"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [
      ...TReturns,
      MethodReturn<"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void">
    ]
  >;

  /**
   * Calls the sendOfflineKeyRegistration()void ABI method.
   *
   * Creator can perfom key unregistration for this LP pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOfflineKeyRegistration(
    args: MethodArgs<"sendOfflineKeyRegistration()void">,
    params?: AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<
    [...TReturns, MethodReturn<"sendOfflineKeyRegistration()void">]
  >;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecTaskManager smart contract using the updateApplication(string)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(
      args: MethodArgs<"updateApplication(string)void">,
      params?: AppClientComposeCallCoreParams & AppClientCompilationParams
    ): BiatecTaskManagerComposer<
      [...TReturns, MethodReturn<"updateApplication(string)void">]
    >;
  };

  /**
   * Makes a clear_state call to an existing instance of the BiatecTaskManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs
  ): BiatecTaskManagerComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): BiatecTaskManagerComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(
    options?: SimulateOptions
  ): Promise<BiatecTaskManagerComposerSimulateResult<TReturns>>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(
    sendParams?: AppClientComposeExecuteParams
  ): Promise<BiatecTaskManagerComposerResults<TReturns>>;
};
export type SimulateOptions = Omit<
  ConstructorParameters<typeof modelsv2.SimulateRequest>[0],
  "txnGroups"
>;
export type BiatecTaskManagerComposerSimulateResult<
  TReturns extends [...any[]]
> = {
  returns: TReturns;
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type BiatecTaskManagerComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
